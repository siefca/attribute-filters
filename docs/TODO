* document iterators [ ]

* review & update docs (common filters parameters and syntax, new common filters)

* publish new release!

---------------------------------------------------------------------------------------------

* attr_virtual - wrap method_defined? and add some gotchas into it that will wait for accessor to be added?
  there already is a hash for attr_virtual, all we need is to check any added accessor against that hash
  that will only apply when there weren't accessors while using attr_virtual


* add sanitize to common filters
  -- sanitize_url
  -- sanitize_string
  -- sanitize_name
  -- sanitize_country
  -- sanitize_iban (future, in a gem attribute-filters-common-iban)

  sanitize_the_attribute :name
  sanitize_the_attribute :name => { :as => :name }
  sanitize :name
  the_attribute :name, :should_be_sanitized
  the_attribute :name, :should_be_sanitized => { :as => :name }
  
  before_save :sanitize_attributes

* one module for sanitizing - AttributeFilters::Sanitize
* possible submodules that enable certain/additional sanitizing methods


  class User
    sanitize_attributes :name, :email, :home => { :as => :address }
  end

-> uses :should_be_sanitized same as filters do.
-> sanitization often uses each_element helper
-> sanitization methods taken from: Sanitize.instance_methods(false) [and aliases]
-> uses one main method for sanitization called sanitize_attributes
    - for each attribute from a set the method checks the :as annotation (sanitize_attributes should add it)
    - if there is no annotation it tries to guess it by the name
      (uses global dictionary against name and its parts from the last one: e.g real_name takes 'name' first)

