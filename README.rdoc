= Attribute Filters for Rails

<b>attribute-filters version <tt>1.0.0</tt></b> (<b><tt>Sugar, ah honey honey</tt></b>)

<b>THIS IS BETA!</b>

* https://rubygems.org/gems/attribute-filters
* https://github.com/siefca/attribute-filters/tree
* mailto:pw@gnu.org


== Summary

Attribute Filters adds couple of DSL keywords and some syntactic sugar
to Rails thereby allowing you to express filtering and groupping
model attributes in a concise and clean way.

== When?

If your Rails application often filters the attributes that has changed
recently and uses callbacks to achieve that, then you may consider
refining that process and write methods for handling common operations
not certain attributes. See what I mean below.

=== Before

  class User < ActiveRecord::Base
    
    before_validation :strip_and_downcase_username
    before_validation :strip_and_downcase_email
    before_validation :strip_and_capitalize_real_name
    
    def strip_and_downcase_username
      if username.present?
        self.username = self.username.strip.mb_chars.downcase.to_s
      end
    end

    def strip_and_downcase_email
      self.email.downcase! if email.present?
    end
    
    def strip_and_capitalize_real_name
      if real_name.present?
        self.real_name = self.real_name.strip.mb_chars.split(' ').
                          map { |n| n.capitalize }.join(' ')
      end
    end
    
  end
  
(The more attributes there is the more messy it becomes and the filtering code is not reusable.)

=== After

  class User < ActiveRecord::Base
  
    attributes_that :should_be_downcased    => [ :username, :email ]
    attributes_that :should_be_stripped     => [ :username, :email, :real_name ]
    attributes_that :should_be_capitalized  => [ :username, :email ]
    
    before_validation :strip_names
    before_validation :downcase_names
    before_validation :capitalize_names
    
    def downcase_names
      filter_attributes_that(:should_be_downcased) do |atr|
        atr.mb_chars.downcase.to_s
      end
    end
    
    def capitalize_names
      filter_attributes_that(:should_be_capitalized) do |atr|
        atr.mb_chars.split(' ').map { |n| n.capitalize }.join(' ')
      end
    end
    
    def strip_names
      for_attributes_that(:should_be_stripped) { |atr| atr.strip! }
    end
    
  end

(Names of new attributes that have to be altered in the same way can just be added to sets
and you can use the same altering methods across all models if you wish to.)

== Usage

You can use it to do attribute filtering as presented above but you can also
try using ActiveModel::AttributeSet directly, which helps to express some logic.
For example:

  class User < ActiveRecord::Base
    
    attributes_that_are :required_to_trade => [ :username, :home_address, :bank_account ]
    
    def can_trade?
      are_attributes(:required_to_trade).all.present?
    end
    
  end

* See {USAGE}[http://rubydoc.info/gems/attribute-filters/file/docs/USAGE] for more examples and detailed information about the usage.
* See {whole documentation}[http://rubydoc.info/gems/attribute-filters/] to browse all documents.

== How it works?

It creates a new Active Model module called ActiveModel::AttributeFilters. That module
contains the needed DSL that goes into your models. It also creates ActiveModel::AttributeSet
class which is just a new kind of set, a structure for storing sets of attribute names.

Then it forces Rails to include the AttributeFilters in any model that
at any time will include ActiveModel::AttributeMethods. The last one is included
quite often; e.g. ActiveRecord and other popular ORM-s use it. (I'm calling it
"the accompanying module".)

That's why you can make use of attribute filters without explicitly including
the module, as long as your application relies on any popular ORM.

If something will go wrong however or your application is somehow unusual, you can always
include the AttributeFilters module manually in any of your models:

  class ExampleModel
    include ActiveModel::AttributeFilters
  end

== Requirements

* activemodel[https://rubygems.org/gems/activemodel]
* rake[https://rubygems.org/gems/rake]
* rubygems[http://docs.rubygems.org/]
* bundler[http://gembundler.com/]

== Download

==== Source code

* https://github.com/siefca/attribute-filters/tree
* <tt>git clone git://github.com/siefca/attribute-filters.git</tt>

==== Gem

* https://rubygems.org/gems/attribute-filters

== Installation

* <tt>gem install attribute-filters</tt>

== Specs

You can run RSpec examples both with

* <tt>rake spec</tt> or just <tt>rake</tt>
* run a test file directly, e.g. <tt>ruby -Ilib -Ispec spec/attribute-filters_spec.rb</tt>

== Common rake tasks

* <tt>bundle exec rake bundler:gemfile</tt> – regenerate the +Gemfile+
* <tt>bundle exec rake docs</tt> – render the documentation (output in the subdirectory directory +doc+)
* <tt>bundle exec rake gem</tt> – builds package (output in the subdirectory +pkg+)
* <tt>bundle exec rake test</tt> – performs tests
* <tt>bundle exec rake Manifest.txt</tt> – regenerates the +Manifest.txt+ file
* <tt>bundle exec rake ChangeLog</tt> – regenerates the +ChangeLog+ file

== Credits

* {iConsulting}[http://www.iconsulting.pl/] supports Free Software and has
contributed to this library by paying for me to eat when I've been coding.
* MrZYX (Jonne Haß) contributed by giving me some hints and answering basic questions on IRC – THX!

== License

Copyright (c) 2012 by Paweł Wilk.

attribute-filters is copyrighted software owned by Paweł Wilk (pw@gnu.org).
You may redistribute and/or modify this software as long as you
comply with either the terms of the LGPL (see {file:docs/LGPL}),
or Ruby's license (see {file:docs/COPYING}).

THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE.
